
For Drizzle ORM, you should follow:
1. Do not use import drizzle orm schema with the original name, please add the `Table` suffix as an alias when importing.
example:
```typescript
import { user as userTable } from "@achat/database/schema";
```
2. In Drizzle Queries, use the callback syntax:
example:
```typescript
await db.query.user.findFirst({
  where: (t, { eq }) => eq(t.role, "admin"),
});
```

For Backend, you should follow:
1. Use Hono OpenAPI to define the API routes and schemas.
2. Use Hono Zod Validator to validate the request body.
   example:
   ```typescript
    import { describeRoute } from 'hono-openapi'
    import { resolver } from 'hono-openapi/zod'
    import { zValidator } from '@hono/zod-validator'
    app.get(
      '/',
      describeRoute({
        description: 'Say hello to the user',
        responses: {
          200: {
            description: 'Successful response',
            content: {
              'text/plain': { schema: resolver(responseSchema) },
            },
          },
        },
      }),
      zValidator('query', querySchema),
      (c) => {
        const query = c.req.valid('query')
        return c.text(`Hello ${query?.name ?? 'Hono'}!`)
      }
    )
    ```
3. Use Hono Sentry to handle the errors.
4. Use Hono Logger to log the requests.